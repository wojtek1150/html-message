{"version":3,"sources":["ng://html-message/lib/components/html-message.component.ts","ng://html-message/lib/components/html-preview-message.component.ts","ng://html-message/lib/html-parser.service.ts","ng://html-message/lib/pipes/html-parser.pipe.ts","ng://html-message/lib/pipes/html-preview.pipe.ts","ng://html-message/lib/pipes/save-html.pipe.ts","ng://html-message/lib/html-message.module.ts"],"names":["HtmlMessageComponent","Component","args","selector","template","changeDetection","ChangeDetectionStrategy","OnPush","encapsulation","ViewEncapsulation","None","Input","HtmlPreviewMessageComponent","this","length","REG_CID1","RegExp","REG_CID2","REG_LINKS","REG_TRIM_START","REG_TRIM_END","REG_WHITE_SPACE","REG_IMAGES","REG_OUTLOCK","HtmlParserService","removeCid","s","replace","parseLinks","match","text","url","trim","parseHtml","parse","includes","HtmlParserPipe","prototype","transform","value","Pipe","name","HtmlPreviewPipe","substr","Infinity","SafeHtmlPipe","sanitized","bypassSecurityTrustHtml","DomSanitizer","HtmlMessageModule","NgModule","declarations","imports","CommonModule","exports"],"mappings":"oaAAA,IAAAA,EAAA,WAEA,SAAAA,KAWA,2BAXCC,EAAAA,UAASC,KAAA,CAAC,CACTC,SAAU,mBACVC,SAAU,sFAIVC,gBAAiBC,EAAAA,wBAAwBC,OACzCC,cAAeC,EAAAA,kBAAkBC,omCAGhCC,EAAAA,SACHX,EAbA,GCAA,IAAAY,EAAA,WAEA,SAAAA,IASWC,KAAAC,OAAS,IACpB,2BAVCb,EAAAA,UAASC,KAAA,CAAC,CACTC,SAAU,2BACVC,SAAU,oDAGVC,gBAAiBC,EAAAA,wBAAwBC,4CAGxCI,EAAAA,sBACAA,EAAAA,SACHC,EAZA,OCCMG,EAAW,IAAIC,OAAO,kCAAqC,OAC3DC,EAAW,IAAID,OAAO,0CAA2C,OACjEE,EAAY,IAAIF,OAAO,sBAAuB,OAC9CG,EAAiB,IAAIH,OAAO,WAC5BI,EAAe,IAAIJ,OAAO,WAC1BK,EAAkB,IAAIL,OAAO,MAAO,KAE7BM,EAAa,IAAIN,OAAO,aAAc,OACtCO,EAAc,IAAIP,OAAO,iBAAkB,OAGxDQ,EAAA,WAAA,SAAAA,KA+BA,OA7BiBA,EAAAC,UAAf,SAAyBC,GACvB,OAAOA,EAAEC,QAAQZ,EAAU,IAAIY,QAAQV,EAAU,KAGpCO,EAAAI,WAAf,SAA0BF,GAExB,OAAOA,EAAEC,QAAQT,GADH,SAAIW,EAAOC,EAAMC,GAAQ,OAAAF,EAAQ,YAAYE,EAAG,oCAAoCD,EAAI,OAAS,OAIlGN,EAAAQ,KAAf,SAAoBN,GAClB,OAAOA,EAAEC,QAAQR,EAAgB,IAAIQ,QAAQP,EAAc,KAG9CI,EAAAS,UAAf,SAAyBP,GACvB,OAAOA,EACJC,QAAQ,eAAgB,IAAIA,QAAQ,iBAAkB,IACtDA,QAAQ,4BAA+B,uBACvCA,QAAQ,6BAAgC,wBACxCA,QAAQL,EAAY,IACpBK,QAAQJ,EAAa,KAGnBC,EAAAU,MAAP,SAAaR,GACX,OAAKA,EACDA,EAAES,SAAS,SACNtB,KAAKmB,KAAKnB,KAAKe,WAAWf,KAAKY,UAAUC,KAAKC,QAAQN,EAAiB,SAEzER,KAAKoB,UAAUP,GAJL,IAMrBF,EA/BA,GCZAY,EAAA,WAGA,SAAAA,KASA,OAJEA,EAAAC,UAAAC,UAAA,SAAUC,GACR,OAAOf,EAAkBU,MAAMK,wBANlCC,EAAAA,KAAItC,KAAA,CAAC,CACJuC,KAAM,iBAQRL,EAZA,GCAAM,EAAA,WAGA,SAAAA,KAaA,OAREA,EAAAL,UAAAC,UAAA,SAAUC,EAAezB,GACvB,OAAOyB,EACJZ,QAAQJ,EAAa,IACrBI,QAAQ,aAAc,IACtBA,QAAQ,SAAU,KAClBgB,OAAO,GAAe,IAAZ7B,EAAgB8B,EAAAA,EAAW9B,wBAV3C0B,EAAAA,KAAItC,KAAA,CAAC,CACJuC,KAAM,kBAYRC,EAhBA,GCAAG,EAAA,WAKE,SAAAA,EAAoBC,GAAAjC,KAAAiC,UAAAA,EAKtB,OAHED,EAAAR,UAAAC,UAAA,SAAUC,GACR,OAAO1B,KAAKiC,UAAUC,wBAAwBR,wBALjDC,EAAAA,KAAItC,KAAA,CAAC,CAAEuC,KAAM,wDAFLO,EAAAA,gBASTH,EAVA,GCAA,IAAAI,EAAA,WAUA,SAAAA,KAagC,2BAb/BC,EAAAA,SAAQhD,KAAA,CAAC,CACRiD,aAAc,CACZnD,EACAY,EACAwB,EACAM,EACAG,GAEFO,QAAS,CACPC,EAAAA,cAEFC,QAAS,CAACtD,EAAsBY,OAEFqC,EAvBhC","sourcesContent":["import { ChangeDetectionStrategy, Component, Input, ViewEncapsulation } from '@angular/core';\n\n@Component({\n  selector: 'lib-html-message',\n  template: `\n    <div class=\"message\" [innerHtml]=\"message | htmlParser | safeHtml\"></div>\n  `,\n  styleUrls: ['./html-message.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None\n})\nexport class HtmlMessageComponent {\n  @Input() message: string;\n}\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\n\n@Component({\n  selector: 'lib-html-message-preview',\n  template: `\n    <p>{{message | htmlPreview:length}}</p>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class HtmlPreviewMessageComponent {\n  @Input() message: string;\n  @Input() length = 100;\n}\n","// OLD FOR TEXT MAILS TO HMTL MAILS\nconst REG_CID1 = new RegExp('(\\[cid:[^\\s]+])<([^>]+)><([^>]+)>', 'gmi');\nconst REG_CID2 = new RegExp('(\\\\[cid:[^\\\\s]+])\\\\s+<([^>]+)><([^>]+)>', 'gmi');\nconst REG_LINKS = new RegExp('([^\\\\s<]+)<([^>]+)>', 'gmi');\nconst REG_TRIM_START = new RegExp('^(\\\\s)*');\nconst REG_TRIM_END = new RegExp('(\\\\s)*$');\nconst REG_WHITE_SPACE = new RegExp('\\\\n', 'g');\n// END\nexport const REG_IMAGES = new RegExp('(<img.*\">)', 'gmi');\nexport const REG_OUTLOCK = new RegExp('(_{32}.From.*)', 'gmi');\n\n\nexport class HtmlParserService {\n\n  private static removeCid(s: string): string {\n    return s.replace(REG_CID1, '').replace(REG_CID2, '');\n  }\n\n  private static parseLinks(s: string): string {\n    const replacer = (match, text, url) => match ? `<a href=\"${url}\" target=\"_blank\" rel=\"nofollow\">${text}</a>` : '';\n    return s.replace(REG_LINKS, replacer);\n  }\n\n  private static trim(s: string): string {\n    return s.replace(REG_TRIM_START, '').replace(REG_TRIM_END, '');\n  }\n\n  private static parseHtml(s: string): string {\n    return s\n      .replace('<html><body>', '').replace('</body></html>', '') // Replace wrap\n      .replace('style=\\\"text-align:right;\\\"', 'class=\\\"align-right\\\"') // Replace Align Right\n      .replace('style=\\\"text-align:center;\\\"', 'class=\\\"align-center\\\"') // Replace Align Center\n      .replace(REG_IMAGES, '') // Remove IMGS\n      .replace(REG_OUTLOCK, ''); // Remove Outlock Footer\n  }\n\n  static parse(s: string): string {\n    if (!s) { return ''; }\n    if (s.includes('[cid:')) { // FALLBACK FOR TEXT ONLY MESSAGES\n      return this.trim(this.parseLinks(this.removeCid(s))).replace(REG_WHITE_SPACE, '<br/>');\n    }\n    return this.parseHtml(s);\n  }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\nimport { HtmlParserService } from '../html-parser.service';\n\n@Pipe({\n  name: 'htmlParser'\n})\nexport class HtmlParserPipe implements PipeTransform {\n\n  transform(value: string): string {\n    return HtmlParserService.parse(value);\n  }\n\n}\n","import { Pipe, PipeTransform } from '@angular/core';\nimport { REG_OUTLOCK } from '../html-parser.service';\n\n@Pipe({\n  name: 'htmlPreview'\n})\nexport class HtmlPreviewPipe implements PipeTransform {\n\n  transform(value: string, length: number): string {\n    return value\n      .replace(REG_OUTLOCK, '')\n      .replace(/<[^>]*>?/gm, '')\n      .replace('&nbsp;', ' ')\n      .substr(0, length === -1 ? Infinity : length);\n  }\n\n}\n","import { Pipe, PipeTransform } from '@angular/core';\nimport { DomSanitizer } from '@angular/platform-browser';\n\n@Pipe({ name: 'safeHtml' })\nexport class SafeHtmlPipe implements PipeTransform {\n  constructor(private sanitized: DomSanitizer) {}\n\n  transform(value) {\n    return this.sanitized.bypassSecurityTrustHtml(value);\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { HtmlMessageComponent } from './components/html-message.component';\nimport { HtmlPreviewMessageComponent } from './components/html-preview-message.component';\n\nimport { HtmlParserPipe } from './pipes/html-parser.pipe';\nimport { HtmlPreviewPipe } from './pipes/html-preview.pipe';\nimport { SafeHtmlPipe } from './pipes/save-html.pipe';\n\n@NgModule({\n  declarations: [\n    HtmlMessageComponent,\n    HtmlPreviewMessageComponent,\n    HtmlParserPipe,\n    HtmlPreviewPipe,\n    SafeHtmlPipe\n  ],\n  imports: [\n    CommonModule\n  ],\n  exports: [HtmlMessageComponent, HtmlPreviewMessageComponent]\n})\nexport class HtmlMessageModule {}\n"]}